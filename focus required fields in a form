shfttabaction(event:any):boolean
{
  let found:boolean=false;
  const requiredFields = this.getRequirdedFields();
let allFieldsLenght:number = requiredFields.allFields.length;
if(event.shiftKey && event.keyCode==9){
for(var i=0;i<allFieldsLenght;i++){
   if(requiredFields.allFields[i].nativeElement==undefined){
     if(requiredFields.allFields[i].inputViewChild.nativeElement.name == event.target.name)
     {
       for(var j=i-1;j>0;j--){
         if(requiredFields.allFields[j].nativeElement==undefined){
           if(requiredFields.allFields[j].inputViewChild.nativeElement.required){            
           this.getElementToFocus(requiredFields.allFields[j]);
           found=true;
           return found;
         }
       }
         else{
         if(requiredFields.allFields[j].nativeElement.required){            
           this.getElementToFocus(requiredFields.allFields[j]);
           found=true;
           return found;
         }
       }
 
       } 
     }
   }
   else{
     if(requiredFields.allFields[i].nativeElement.name == event.target.name){
       
       for(var j=i-1;j>0;j--){
         if(requiredFields.allFields[j].nativeElement==undefined){
           if(requiredFields.allFields[j].inputViewChild.nativeElement.required){            
           this.getElementToFocus(requiredFields.allFields[j]);
           found=true;
           return found;
         }
       }
         else{
         if(requiredFields.allFields[j].nativeElement.required){            
           this.getElementToFocus(requiredFields.allFields[j]);
           found=true;
           return found;
         }
       }
 
       }
       if(!found) {
         var vbutton = document.getElementById('btnVendorID') as HTMLElement;
         setTimeout(() => vbutton.focus(),0); 
        return;      
       }
     }
   }
   
 }  
}
return found;
}


private getRequirdedFields(): any {
  const requiredFieldList: any[] = [];
  const nonrequiredFieldList: any[] = [];
  const allFields:any[] = [];
  this.formElements.toArray().forEach((iElement: any) => {
    if (iElement instanceof ElementRef) {
      if (iElement.nativeElement) {
        allFields.push(iElement);
        if (iElement.nativeElement.required) {            
          requiredFieldList.push(iElement);
        } else {
          nonrequiredFieldList.push(iElement);
        }
      }
    } else if (iElement instanceof RadioButton) {
      if (iElement.inputViewChild && iElement.inputViewChild.nativeElement) {
        allFields.push(iElement);
        if (iElement.inputViewChild.nativeElement.required) {
            requiredFieldList.push(iElement);
        } 
         else {
          nonrequiredFieldList.push(iElement);
        }
      }
    } else { }
  });
  return { requiredFields: requiredFieldList, nonrequiredFields: nonrequiredFieldList, allFields:allFields };
}



